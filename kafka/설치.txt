1. Oracle Virtualbox 설치

2. Ubuntu 설치
 - Virtualbox에 설치할 OS

3. update
 - sudo apt-get update / upgrate
 - ubuntu update 이후 최신버전 자동업데이트하니 계속 OS가 터져서 3번재설치함(ㄷ번이후 자동업데이트 안함)

4. net-tools 설치

5. 고정 ip 할당(ssh기반의 클라이언트를 사용하기위함)
 - VM은 재부팅마다 IP가 변경되므로 고정 IP할당이 필요함
 - openSSH서버 설치 
 - IP : 192.168.56.1
 - MAC : 080027E711B2
 
6. putty, mtputty 설치
 - SSH클라이언트로 기동하기위함
 
7. confluent Kafka 7.1.2 설치

8. 환경변수 세팅
 1)vi .bashrc
 2) 맨아래에 export CONFLUENT_HOME=/home/jh/confluent
          export PATH=.:$PATH:$CONFLUENT_HOME/bin
 3) :wq! 이후 . .bash 로 적용
 
9. zookeeper 기동
 - zookeeper-server-start $CONFLUENT_HOME/etc/kafka/zookeeper.properties

10. kafka 기동
- kafka-server-start $CONFLUENT_HOME/etc/kafka/kafka.properties

11. test topic 생성
 - kafka-topics --bootstrap-server localhost:9092 --create welcome-topic
 
12. shutdown
 - ctrl + c
 
13. vi 실행파일 생성
 - zoo_start.sh, kafka_start.sh
 - chomod +x *.sh (권한부여)
 
14. apache vs confluent
 - 경로랑 설정파일정도가 좀 다름
 
15. topic 생성
 - kafka-topics --bootstrap-server localhost:9092 --create --topic test_topic_01(topic name) --partition 3(토픽내부의 파티션 설정 default : 1) --replication_factor 3(브로커의 개수만큼 복제가 가능)
 
16. producer
 - kafka-console-producer --bootstrap-server localhost:9092 --topic topic_name
 
17 consumer
 - kafka-console-consumer --bootstrap-server localhost:9092 --topic topic_name {--offset}
 
18 Serialize
 - key/value를 byte Array 형태로 변환하는 과정
  - 객체의 유형, 데이터포맷, 적용 시스템에 산관하지 않도록 Byte Stream형태로 변환을한다.(Object to Byte Stream)
 - Broker에서는 반드시 Serialized Byte Array만 저장을해줌
 - Consumer은 Deserialize를 통해 원래 key-value로 변환한다
 -Deserialize를해야 Consumer에서 데이터 읽기가가능해짐
 
19. 메세징순서
 - 하나의 파티션 내에서만 메세지 순서를 보장한다. 여러 파티션사용시 순서가 보장 안될수가 있음
 - 특정 key를 사용하면, 하나의 파티션에 고정되어 전송이된다. (순서가 보장된다)
 - kafka-console-producer --bootstrap-server localhost:9092 --topic test-topic \--property key.separator=: --property parse.key=true
 - kafka-console-consumer --bootstrap-server localhost:9092 --topic test-topic \--property print.key=true --property print.value=true --from-beginning
 
20. 파티션 분배전략
 - 1.4v 를 기점으로 round robin -> 스티키 방식으로 변경되었음

21. Consumer Group
 - 모든 Consumer은 Consumer Group에 반드시 소속되어야하며, Consumer Group과 Consumer은 1:N의 관계를 가진다.
 - Group 내 Consumer가 없으면 일정기간이후 삭제가된다.
 - CURRENT-OFFSET: 현재 consumer-group에서의 offset 
 - LOG-END-OFFSET: Producer에서 마지막으로 발행한 메시지의 offset
 - LAG: LOG-END-OFFSET에서 CURRENT-OFFSET을 뺀 값